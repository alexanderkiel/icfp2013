(ns icfp2013.eval-test
  (:require [clojure.test :refer :all ]
            [icfp2013.eval :refer :all ])
  (:refer-clojure :exclude [not or and]))

(deftest fold-test
  (testing "fold with plus"
    (are [result x] (= result (fold x 0 (lambda (y z) (plus y z))))
      0x2 0x0101
      0x3 0x010101
      0x4 0x010102)))

(deftest train
  (testing "TxRN3nSXLyARgHXVRZnQeIzB"
    (are [result x] (= result ((lambda (x_8401) (fold x_8401 0 (lambda (x_8401 x_8402) (if0 x_8401 (not x_8401) x_8402)))) x))
      (not 0) 0x00000000000001
      (not 0) 0x00000000000002
      (not 0) 0x00000000000010
      (not 0) 0x00000000000020))
  (testing "T3LKfVb7aA1OKm4tPSI60SAx"
    (are [result x] (= result ((lambda (x_8650) (if0 (plus x_8650 (shr1 x_8650)) 1 (shr16 x_8650))) x))
      0x0000000000000000 0x00000000000001
      0x0000000000000000 0x00000000000010
      0x0000000000000000 0x00000000000100
      0x0000000000000000 0x00000000001000
      0x0000000000000001 0x00000000010000
      0x0000000000000010 0x00000000100000
      0x0000000000000100 0x00000001000000
      0x0000000000001000 0x00000010000000
      0x0000000000010000 0x00000100000000
      0x0000000000100000 0x00001000000000
      0x0000000001000000 0x00010000000000
      0x0000000010000000 0x00100000000000
      0x0000000100000000 0x01000000000000
      0x0000001000000000 0x10000000000000))
  (testing "Wn6NsMYDMb5qmdb2bcZduAV0"
    (are [result x] (= result ((lambda (x_8481) (fold x_8481 0 (lambda (x_8481 x_8482) (plus x_8482 (plus x_8481 x_8482))))) x))
      0x0000000000000080 0x00000000000001
      0x0000000000000800 0x00000000000010
      0x0000000000000040 0x00000000000100
      0x0000000000000400 0x00000000001000
      0x0000000000000020 0x00000000010000
      0x0000000000000200 0x00000000100000
      0x0000000000000010 0x00000001000000
      0x0000000000000100 0x00000010000000
      0x0000000000000008 0x00000100000000
      0x0000000000000080 0x00001000000000
      0x0000000000000004 0x00010000000000
      0x0000000000000040 0x00100000000000
      0x0000000000000002 0x01000000000000
      0x0000000000000020 0x10000000000000))
  (testing "qFxXTe9ffjTyZjHOijntlJKe"
    (are [result x] (= result ((lambda (x_7431) (fold x_7431 0 (lambda (x_7431 x_7432) (xor (and x_7431 1) 0)))) x))
      0x0000000000000000 0x00000000000001
      0x0000000000000000 0x00000000000010
      0x0000000000000000 0x00000000000100
      0x0000000000000000 0x00000000001000
      0x0000000000000000 0x00000000010000
      0x0000000000000000 0x00000000100000
      0x0000000000000000 0x00000001000000
      0x0000000000000000 0x00000010000000
      0x0000000000000000 0x00000100000000
      0x0000000000000000 0x00001000000000
      0x0000000000000000 0x00010000000000
      0x0000000000000000 0x00100000000000
      0x0000000000000000 0x01000000000000
      0x0000000000000000 0x10000000000000))
  (testing "xwVnFpgOpz9NNBv7AWBLzsh6"
    (are [result x] (= result ((lambda (x_77891) (fold (shr1 (xor x_77891 (shl1 (if0 (shr4 (not (shr1 (shr1 (and (and (or (plus x_77891 (or 1 x_77891)) x_77891) 1) 1))))) 0 0)))) 1 (lambda (x_77892 x_77893) (shl1 (or x_77893 x_77892))))) x))
      0x0000000000000100 0x00000000000001
      0x0000000000000900 0x00000000000010
      0x0000000000008100 0x00000000000100
      0x0000000000000500 0x00000000001000
      0x0000000000004100 0x00000000010000
      0x0000000000000300 0x00000000100000
      0x0000000000002100 0x00000001000000
      0x0000000000000100 0x00000010000000
      0x0000000000001100 0x00000100000000
      0x0000000000000180 0x00001000000000
      0x0000000000000900 0x00010000000000
      0x0000000000000140 0x00100000000000
      0x0000000000000500 0x01000000000000
      0x0000000000000120 0x10000000000000))
  (testing "FqZFtfkEylaThAILYjx8lXS7"
    (are [result x] (= result ((lambda (x_362) (shr4 x_362)) x))
      2r111111111111111111111111111111111111111111111111111111111111 (not 0))))
